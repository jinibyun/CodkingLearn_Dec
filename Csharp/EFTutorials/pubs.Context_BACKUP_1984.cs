//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFTutorials
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pubsEntities : DbContext
    {
        public pubsEntities()
            : base("name=pubsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<author> authors { get; set; }
<<<<<<< HEAD
        public virtual DbSet<CUSTOMER> CUSTOMERS { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<ErrorTracer> ErrorTracers { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<pub_info> pub_info { get; set; }
        public virtual DbSet<publisher> publishers { get; set; }
        public virtual DbSet<REQUEST> REQUESTs { get; set; }
        public virtual DbSet<sale> sales { get; set; }
=======
        public virtual DbSet<BigCategory> BigCategories { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<pub_info> pub_info { get; set; }
        public virtual DbSet<publisher> publishers { get; set; }
        public virtual DbSet<sale> sales { get; set; }
        public virtual DbSet<SmallCategory> SmallCategories { get; set; }
>>>>>>> 8daa12fc191f94d29c1fe3af3e07733202efa1a0
        public virtual DbSet<store> stores { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TestMember> TestMembers { get; set; }
        public virtual DbSet<TestOrder> TestOrders { get; set; }
        public virtual DbSet<TestProduct> TestProducts { get; set; }
        public virtual DbSet<titleauthor> titleauthors { get; set; }
        public virtual DbSet<title> titles { get; set; }
<<<<<<< HEAD
        public virtual DbSet<discount> discounts { get; set; }
        public virtual DbSet<roysched> royscheds { get; set; }
        public virtual DbSet<titleview> titleviews { get; set; }
        public virtual DbSet<vTitleAuthorPublisher> vTitleAuthorPublishers { get; set; }
        public virtual DbSet<testTable> testTables { get; set; }
=======
        public virtual DbSet<authors2> authors2 { get; set; }
        public virtual DbSet<discount> discounts { get; set; }
        public virtual DbSet<roysched> royscheds { get; set; }
        public virtual DbSet<sales2> sales2 { get; set; }
        public virtual DbSet<testTable2> testTable2 { get; set; }
        public virtual DbSet<titleview> titleviews { get; set; }
    
        [DbFunction("pubsEntities", "customersbycountry")]
        public virtual IQueryable<customersbycountry_Result> customersbycountry(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<customersbycountry_Result>("[pubsEntities].[customersbycountry](@Country)", countryParameter);
        }
>>>>>>> 8daa12fc191f94d29c1fe3af3e07733202efa1a0
    
        public virtual ObjectResult<string> byroyalty(Nullable<int> percentage)
        {
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("byroyalty", percentageParameter);
        }
    
<<<<<<< HEAD
        public virtual ObjectResult<string> callingFunction(string firstParam)
        {
            var firstParamParameter = firstParam != null ?
                new ObjectParameter("firstParam", firstParam) :
                new ObjectParameter("firstParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("callingFunction", firstParamParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Proc_ExceptionHandlingExample()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Proc_ExceptionHandlingExample");
        }
    
        public virtual int Proc_InsertErrorDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_InsertErrorDetails");
        }
    
=======
>>>>>>> 8daa12fc191f94d29c1fe3af3e07733202efa1a0
        public virtual ObjectResult<reptq1_Result> reptq1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq1_Result>("reptq1");
        }
    
        public virtual ObjectResult<reptq2_Result> reptq2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq2_Result>("reptq2");
        }
    
        public virtual ObjectResult<reptq3_Result> reptq3(Nullable<decimal> lolimit, Nullable<decimal> hilimit, string type)
        {
            var lolimitParameter = lolimit.HasValue ?
                new ObjectParameter("lolimit", lolimit) :
                new ObjectParameter("lolimit", typeof(decimal));
    
            var hilimitParameter = hilimit.HasValue ?
                new ObjectParameter("hilimit", hilimit) :
                new ObjectParameter("hilimit", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq3_Result>("reptq3", lolimitParameter, hilimitParameter, typeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
<<<<<<< HEAD
        public virtual int usp_2proc_exe()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_2proc_exe");
        }
    
        public virtual int usp_2procs_exe()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_2procs_exe");
        }
    
        public virtual int usp_authors_insert(string au_id, string au_lname, string au_fname, string phone, string address, string city, string state, string zip, Nullable<bool> contract)
        {
            var au_idParameter = au_id != null ?
                new ObjectParameter("au_id", au_id) :
                new ObjectParameter("au_id", typeof(string));
    
            var au_lnameParameter = au_lname != null ?
                new ObjectParameter("au_lname", au_lname) :
                new ObjectParameter("au_lname", typeof(string));
    
            var au_fnameParameter = au_fname != null ?
                new ObjectParameter("au_fname", au_fname) :
                new ObjectParameter("au_fname", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var contractParameter = contract.HasValue ?
                new ObjectParameter("contract", contract) :
                new ObjectParameter("contract", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_authors_insert", au_idParameter, au_lnameParameter, au_fnameParameter, phoneParameter, addressParameter, cityParameter, stateParameter, zipParameter, contractParameter);
        }
    
        public virtual int usp_titles_insert(string title_id, string title, string type, string pub_id, Nullable<decimal> price, Nullable<decimal> advance, Nullable<int> royalty, Nullable<int> ytd_sales, string notes, Nullable<System.DateTime> pubdate)
        {
            var title_idParameter = title_id != null ?
                new ObjectParameter("title_id", title_id) :
                new ObjectParameter("title_id", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var pub_idParameter = pub_id != null ?
                new ObjectParameter("pub_id", pub_id) :
                new ObjectParameter("pub_id", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            var advanceParameter = advance.HasValue ?
                new ObjectParameter("advance", advance) :
                new ObjectParameter("advance", typeof(decimal));
    
            var royaltyParameter = royalty.HasValue ?
                new ObjectParameter("royalty", royalty) :
                new ObjectParameter("royalty", typeof(int));
    
            var ytd_salesParameter = ytd_sales.HasValue ?
                new ObjectParameter("ytd_sales", ytd_sales) :
                new ObjectParameter("ytd_sales", typeof(int));
    
            var notesParameter = notes != null ?
                new ObjectParameter("notes", notes) :
                new ObjectParameter("notes", typeof(string));
    
            var pubdateParameter = pubdate.HasValue ?
                new ObjectParameter("pubdate", pubdate) :
                new ObjectParameter("pubdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_titles_insert", title_idParameter, titleParameter, typeParameter, pub_idParameter, priceParameter, advanceParameter, royaltyParameter, ytd_salesParameter, notesParameter, pubdateParameter);
=======
        public virtual int uspDynamicSP(string v_tblname, string v_title_id)
        {
            var v_tblnameParameter = v_tblname != null ?
                new ObjectParameter("v_tblname", v_tblname) :
                new ObjectParameter("v_tblname", typeof(string));
    
            var v_title_idParameter = v_title_id != null ?
                new ObjectParameter("v_title_id", v_title_id) :
                new ObjectParameter("v_title_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDynamicSP", v_tblnameParameter, v_title_idParameter);
>>>>>>> 8daa12fc191f94d29c1fe3af3e07733202efa1a0
        }
    
        public virtual ObjectResult<uspGetPricePerBook_Result> uspGetPricePerBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPricePerBook_Result>("uspGetPricePerBook");
        }
    
        public virtual ObjectResult<uspGetTitleWithPrice_Result> uspGetTitleWithPrice(Nullable<int> v_price)
        {
            var v_priceParameter = v_price.HasValue ?
                new ObjectParameter("v_price", v_price) :
                new ObjectParameter("v_price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTitleWithPrice_Result>("uspGetTitleWithPrice", v_priceParameter);
        }
<<<<<<< HEAD
=======
    
        public virtual int uspSaveForSP(Nullable<int> v_c1, string v_c2)
        {
            var v_c1Parameter = v_c1.HasValue ?
                new ObjectParameter("v_c1", v_c1) :
                new ObjectParameter("v_c1", typeof(int));
    
            var v_c2Parameter = v_c2 != null ?
                new ObjectParameter("v_c2", v_c2) :
                new ObjectParameter("v_c2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveForSP", v_c1Parameter, v_c2Parameter);
        }
    
        public virtual int uspSPwithOUTPUT(string v_title_id, ObjectParameter v_output)
        {
            var v_title_idParameter = v_title_id != null ?
                new ObjectParameter("v_title_id", v_title_id) :
                new ObjectParameter("v_title_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSPwithOUTPUT", v_title_idParameter, v_output);
        }
>>>>>>> 8daa12fc191f94d29c1fe3af3e07733202efa1a0
    }
}
