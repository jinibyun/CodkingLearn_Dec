//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EFTutorials
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pubsEntities : DbContext
    {
        public pubsEntities()
            : base("name=pubsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<author> authors { get; set; }
        public virtual DbSet<BigCategory> BigCategories { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<job> jobs { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<pub_info> pub_info { get; set; }
        public virtual DbSet<publisher> publishers { get; set; }
        public virtual DbSet<sale> sales { get; set; }
        public virtual DbSet<SmallCategory> SmallCategories { get; set; }
        public virtual DbSet<store> stores { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TestMember> TestMembers { get; set; }
        public virtual DbSet<TestOrder> TestOrders { get; set; }
        public virtual DbSet<TestProduct> TestProducts { get; set; }
        public virtual DbSet<titleauthor> titleauthors { get; set; }
        public virtual DbSet<title> titles { get; set; }
        public virtual DbSet<authors2> authors2 { get; set; }
        public virtual DbSet<discount> discounts { get; set; }
        public virtual DbSet<roysched> royscheds { get; set; }
        public virtual DbSet<sales2> sales2 { get; set; }
        public virtual DbSet<testTable2> testTable2 { get; set; }
        public virtual DbSet<titleview> titleviews { get; set; }
    
        [DbFunction("pubsEntities", "customersbycountry")]
        public virtual IQueryable<customersbycountry_Result> customersbycountry(string country)
        {
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<customersbycountry_Result>("[pubsEntities].[customersbycountry](@Country)", countryParameter);
        }
    
        public virtual ObjectResult<string> byroyalty(Nullable<int> percentage)
        {
            var percentageParameter = percentage.HasValue ?
                new ObjectParameter("percentage", percentage) :
                new ObjectParameter("percentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("byroyalty", percentageParameter);
        }
    
        public virtual ObjectResult<reptq1_Result> reptq1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq1_Result>("reptq1");
        }
    
        public virtual ObjectResult<reptq2_Result> reptq2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq2_Result>("reptq2");
        }
    
        public virtual ObjectResult<reptq3_Result> reptq3(Nullable<decimal> lolimit, Nullable<decimal> hilimit, string type)
        {
            var lolimitParameter = lolimit.HasValue ?
                new ObjectParameter("lolimit", lolimit) :
                new ObjectParameter("lolimit", typeof(decimal));
    
            var hilimitParameter = hilimit.HasValue ?
                new ObjectParameter("hilimit", hilimit) :
                new ObjectParameter("hilimit", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<reptq3_Result>("reptq3", lolimitParameter, hilimitParameter, typeParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int uspDynamicSP(string v_tblname, string v_title_id)
        {
            var v_tblnameParameter = v_tblname != null ?
                new ObjectParameter("v_tblname", v_tblname) :
                new ObjectParameter("v_tblname", typeof(string));
    
            var v_title_idParameter = v_title_id != null ?
                new ObjectParameter("v_title_id", v_title_id) :
                new ObjectParameter("v_title_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDynamicSP", v_tblnameParameter, v_title_idParameter);
        }
    
        public virtual ObjectResult<uspGetPricePerBook_Result> uspGetPricePerBook()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPricePerBook_Result>("uspGetPricePerBook");
        }
    
        public virtual ObjectResult<uspGetTitleWithPrice_Result> uspGetTitleWithPrice(Nullable<int> v_price)
        {
            var v_priceParameter = v_price.HasValue ?
                new ObjectParameter("v_price", v_price) :
                new ObjectParameter("v_price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTitleWithPrice_Result>("uspGetTitleWithPrice", v_priceParameter);
        }
    
        public virtual int uspSaveForSP(Nullable<int> v_c1, string v_c2)
        {
            var v_c1Parameter = v_c1.HasValue ?
                new ObjectParameter("v_c1", v_c1) :
                new ObjectParameter("v_c1", typeof(int));
    
            var v_c2Parameter = v_c2 != null ?
                new ObjectParameter("v_c2", v_c2) :
                new ObjectParameter("v_c2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSaveForSP", v_c1Parameter, v_c2Parameter);
        }
    
        public virtual int uspSPwithOUTPUT(string v_title_id, ObjectParameter v_output)
        {
            var v_title_idParameter = v_title_id != null ?
                new ObjectParameter("v_title_id", v_title_id) :
                new ObjectParameter("v_title_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspSPwithOUTPUT", v_title_idParameter, v_output);
        }
    }
}
